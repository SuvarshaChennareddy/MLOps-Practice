name: Scheduled Retrain and Deploy

on:
  push:
    branches:
      - main
  schedule:
    - cron: "*/5 * * * *"  # Every 5 minutes

permissions:
  contents: write  # Grants permission to access and modify contents (required for releases)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements1.txt

      # Download the latest model from the latest GitHub release
      - name: Download latest release artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication
        run: |
          gh release download --pattern "stock_price_model.h5"
        continue-on-error: false  # Ignore if no artifact exists (i.e., first run)

      # Fetch new stock data
      - name: Fetch new data
        run: |
          python fetch_data.py

      # Retrain the model with new data
      - name: Retrain model
        run: |
          python train.py

      # Evaluate the new model
      - name: Evaluate the new model
        run: |
          python evaluate.py

      # Check if the new model is better, and if so, release it
      - name: Replace model if better
        id: replace-model
        env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub token for authentication
        run: |
          if [ $(cat better.txt) = "true" ]; then
            echo "New model is better, replacing release"
            mv new_stock_price_model.h5 stock_price_model.h5
            echo "::set-output name=deploy::true"
            VERSION=$(date +"%Y%m%d%H%M")
            gh release create $VERSION ./stock_price_model.h5 --title "Model Release $VERSION" --notes "Latest model"
          else
            echo "New model is not better, keeping the old one"
            echo "::set-output name=deploy::false"
          fi

      # Deploy the new model if it performs better
      - name: Deploy model
        if: steps.replace-model.outputs.deploy == 'true'
        run: |
          docker build -t ml-model .
          docker run -d --name ml-model-container -p 5000:5000 ml-model
          sleep 30
          docker logs ml-model-container
